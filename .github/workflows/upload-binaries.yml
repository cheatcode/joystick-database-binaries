name: Build and Upload Database Binaries to R2

on:
  workflow_dispatch:
    inputs:
      db_version:
        description: "Version of the database to fetch/build"
        required: true
      database:
        description: "Database (mongodb, postgresql, redis, clickhouse)"
        required: true
        type: choice
        options:
          - mongodb
          - postgresql
          - redis
          - clickhouse

jobs:
  build:
    runs-on: ${{ matrix.os }}
    if: >
      !(github.event.inputs.database == 'clickhouse' && matrix.platform == 'windows')
    strategy:
      matrix:
        include:
          - os: macos-latest
            platform: macos
            arch: arm64
            ext: tar.gz
          - os: macos-latest
            platform: macos
            arch: _x86_64
            ext: tar.gz
          - os: ubuntu-latest
            platform: linux
            arch: _x86_64
            ext: tar.gz
          - os: windows-latest
            platform: windows
            arch: _x86_64
            ext: zip

    env:
      DB_VERSION: ${{ github.event.inputs.db_version }}
      DB_MAJOR_VERSION: ${{ github.event.inputs.db_version }}
      DATABASE: ${{ github.event.inputs.database }}
      R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
      R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
      R2_BUCKET: ${{ secrets.R2_BUCKET }}
      R2_ENDPOINT: ${{ secrets.R2_ENDPOINT }}

    steps:
      - name: Extract major version
        run: echo "DB_MAJOR_VERSION=${DB_VERSION%%.*}" >> $GITHUB_ENV

      - name: Set up architecture switching (x86_64 on macOS)
        if: matrix.arch == '_x86_64' && matrix.platform == 'macos'
        run: |
          echo "alias brew='arch -x86_64 /usr/local/bin/brew'" >> $GITHUB_ENV

      - name: Install dependencies and fetch binaries
        run: |
          mkdir -p ./raw/${{ env.DATABASE }}/${{ env.DB_MAJOR_VERSION }}/${{ matrix.platform }}/${{ matrix.arch }}

          case "$DATABASE" in
            redis)
              if [[ "${{ runner.os }}" == "Windows" ]]; then
                curl -L -o memurai.zip https://github.com/tporadowski/redis/releases/download/v7.0.15/Redis-x64-7.0.15.1.zip
                unzip memurai.zip -d ./temp
                cp ./temp/*.exe ./raw/${DATABASE}/${DB_MAJOR_VERSION}/${{ matrix.platform }}/${{ matrix.arch }}/
              elif [[ "${{ runner.os }}" == "macOS" ]]; then
                brew install redis
                cp $(brew --prefix redis)/bin/redis-server ./raw/${DATABASE}/${DB_MAJOR_VERSION}/${{ matrix.platform }}/${{ matrix.arch }}/
              else
                sudo apt update && sudo apt install redis-server -y
                cp $(which redis-server) ./raw/${DATABASE}/${DB_MAJOR_VERSION}/${{ matrix.platform }}/${{ matrix.arch }}/
              fi
              ;;
            mongodb)
              if [[ "${{ runner.os }}" == "Windows" ]]; then
                curl -LO https://fastdl.mongodb.org/windows/mongodb-windows-x86_64-${DB_VERSION}.zip
                unzip mongodb-windows-x86_64-${DB_VERSION}.zip -d ./temp
                cp ./temp/mongodb-*/bin/* ./raw/${DATABASE}/${DB_MAJOR_VERSION}/${{ matrix.platform }}/${{ matrix.arch }}/
              elif [[ "${{ runner.os }}" == "macOS" ]]; then
                curl -LO https://fastdl.mongodb.org/osx/mongodb-macos-${matrix.arch#_}-${DB_VERSION}.tgz
                tar -xzf mongodb-macos-*-${DB_VERSION}.tgz
                cp ./mongodb-*/bin/* ./raw/${DATABASE}/${DB_MAJOR_VERSION}/${{ matrix.platform }}/${{ matrix.arch }}/
              else
                curl -LO https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-ubuntu2204-${DB_VERSION}.tgz
                tar -xzf mongodb-linux-*.tgz
                cp ./mongodb-*/bin/* ./raw/${DATABASE}/${DB_MAJOR_VERSION}/${{ matrix.platform }}/${{ matrix.arch }}/
              fi
              ;;
            postgresql)
              if [[ "${{ runner.os }}" == "Windows" ]]; then
                choco install postgresql --version=${DB_VERSION} -y
                cp "C:/Program Files/PostgreSQL/${DB_VERSION}/bin/*" ./raw/${DATABASE}/${DB_MAJOR_VERSION}/${{ matrix.platform }}/${{ matrix.arch }}/
              elif [[ "${{ runner.os }}" == "macOS" ]]; then
                brew install postgresql@${DB_VERSION%%.*}
                cp $(brew --prefix postgresql@${DB_VERSION%%.*})/bin/* ./raw/${DATABASE}/${DB_MAJOR_VERSION}/${{ matrix.platform }}/${{ matrix.arch }}/
              else
                sudo apt update && sudo apt install postgresql-${DB_VERSION%%.*} -y
                cp /usr/lib/postgresql/${DB_VERSION%%.*}/bin/* ./raw/${DATABASE}/${DB_MAJOR_VERSION}/${{ matrix.platform }}/${{ matrix.arch }}/
              fi
              ;;
            clickhouse)
              if [[ "${{ runner.os }}" == "macOS" ]]; then
                brew install clickhouse
                cp $(brew --prefix clickhouse)/bin/* ./raw/${DATABASE}/${DB_MAJOR_VERSION}/${{ matrix.platform }}/${{ matrix.arch }}/
              elif [[ "${{ runner.os }}" == "Linux" ]]; then
                curl -LO https://builds.clickhouse.com/master/x86_64/clickhouse
                chmod +x clickhouse
                mv clickhouse ./raw/${DATABASE}/${DB_MAJOR_VERSION}/${{ matrix.platform }}/${{ matrix.arch }}/
              fi
              ;;
          esac

      - name: Archive binaries into platform-specific package
        run: |
          mkdir -p ./packages/${{ env.DATABASE }}/${{ env.DB_MAJOR_VERSION }}/${{ matrix.platform }}
          cd ./raw/${{ env.DATABASE }}/${{ env.DB_MAJOR_VERSION }}/${{ matrix.platform }}/${{ matrix.arch }}
          if [[ "${{ matrix.ext }}" == "zip" ]]; then
            7z a ../../../../packages/${{ env.DATABASE }}/${{ env.DB_MAJOR_VERSION }}/${{ matrix.platform }}/${{ matrix.arch }}.zip *
          else
            tar -czf ../../../../packages/${{ env.DATABASE }}/${{ env.DB_MAJOR_VERSION }}/${{ matrix.platform }}/${{ matrix.arch }}.tar.gz *
          fi

      - name: Upload to R2
        uses: jakejarvis/s3-sync-action@master
        with:
          args: --acl public-read --follow-symlinks
        env:
          AWS_S3_BUCKET: ${{ env.R2_BUCKET }}
          AWS_ACCESS_KEY_ID: ${{ env.R2_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ env.R2_SECRET_ACCESS_KEY }}
          AWS_REGION: "us-east-1"
          SOURCE_DIR: ./packages/${{ env.DATABASE }}/${{ env.DB_MAJOR_VERSION }}/${{ matrix.platform }}
          DEST_DIR: ${{ env.DATABASE }}/${{ env.DB_MAJOR_VERSION }}/${{ matrix.platform }}
          S3_ENDPOINT: ${{ env.R2_ENDPOINT }}