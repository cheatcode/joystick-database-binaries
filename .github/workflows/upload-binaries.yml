name: Build and Upload DB Binaries to R2

on:
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    timeout-minutes: 120
    strategy:
      max-parallel: 3
      fail-fast: false
      matrix:
        include:
          # MongoDB
          - database: mongodb
            db_version: 8.0.12
            os: macos-latest
            platform: macos
            arch: arm64
            ext: tar.gz
          - database: mongodb
            db_version: 8.0.12
            os: macos-latest
            platform: macos
            arch: x86_64
            ext: tar.gz
          - database: mongodb
            db_version: 8.0.12
            os: ubuntu-latest
            platform: linux
            arch: x86_64
            ext: tar.gz
          - database: mongodb
            db_version: 8.0.12
            os: ubuntu-latest
            platform: linux
            arch: arm64
            ext: tar.gz

          # PostgreSQL
          - database: postgresql
            db_version: 17.6
            os: macos-latest
            platform: macos
            arch: arm64
            ext: tar.gz
          - database: postgresql
            db_version: 17.6
            os: macos-latest
            platform: macos
            arch: x86_64
            ext: tar.gz
          - database: postgresql
            db_version: 17.6
            os: ubuntu-latest
            platform: linux
            arch: x86_64
            ext: tar.gz
          - database: postgresql
            db_version: 17.6
            os: ubuntu-latest
            platform: linux
            arch: arm64
            ext: tar.gz

          # Redis
          - database: redis
            db_version: 7.2.5
            os: macos-latest
            platform: macos
            arch: arm64
            ext: tar.gz
          - database: redis
            db_version: 7.2.5
            os: macos-latest
            platform: macos
            arch: x86_64
            ext: tar.gz
          - database: redis
            db_version: 7.2.5
            os: ubuntu-latest
            platform: linux
            arch: x86_64
            ext: tar.gz
          - database: redis
            db_version: 7.2.5
            os: ubuntu-latest
            platform: linux
            arch: arm64
            ext: tar.gz

    environment: production

    env:
      R2_ACCESS_KEY_ID: ${{ secrets.R2_ACCESS_KEY_ID }}
      R2_SECRET_ACCESS_KEY: ${{ secrets.R2_SECRET_ACCESS_KEY }}
      R2_BUCKET: ${{ secrets.R2_BUCKET }}
      R2_ENDPOINT: ${{ secrets.R2_ENDPOINT }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set environment variables
        shell: bash
        run: |
          echo "DATABASE=${{ matrix.database }}" >> $GITHUB_ENV
          echo "DB_VERSION=${{ matrix.db_version }}" >> $GITHUB_ENV
          echo "DB_MAJOR_VERSION=$(echo '${{ matrix.db_version }}' | cut -d. -f1)" >> $GITHUB_ENV
          echo "ARCH_CLEAN=$(echo '${{ matrix.arch }}' | sed 's/^_//')" >> $GITHUB_ENV

      - name: Install dependencies and fetch binaries
        shell: bash
        run: |
          mkdir -p ./raw/${DATABASE}/${DB_MAJOR_VERSION}/${{ matrix.platform }}/${{ matrix.arch }}

          case "$DATABASE" in
            redis)
              curl -LO http://download.redis.io/releases/redis-${DB_VERSION}.tar.gz
              tar -xzf redis-${DB_VERSION}.tar.gz
              make -C redis-${DB_VERSION}
              cp redis-${DB_VERSION}/src/redis-server ./raw/${DATABASE}/${DB_MAJOR_VERSION}/${{ matrix.platform }}/${{ matrix.arch }}/
              ;;
            mongodb)
              if [[ "$RUNNER_OS" == "macOS" ]]; then
                curl -LO https://fastdl.mongodb.org/osx/mongodb-macos-${ARCH_CLEAN}-${DB_VERSION}.tgz
                tar -xzf mongodb-macos-${ARCH_CLEAN}-${DB_VERSION}.tgz
                cp ./mongodb-*/bin/* ./raw/${DATABASE}/${DB_MAJOR_VERSION}/${{ matrix.platform }}/${{ matrix.arch }}/

                if [[ "${{ matrix.arch }}" == "arm64" ]]; then
                  curl -LO https://downloads.mongodb.com/compass/mongosh-2.5.6-darwin-arm64.zip
                  unzip mongosh-2.5.6-darwin-arm64.zip
                  cp ./mongosh-2.5.6-darwin-arm64/bin/mongosh ./raw/${DATABASE}/${DB_MAJOR_VERSION}/${{ matrix.platform }}/${{ matrix.arch }}/
                else
                  curl -LO https://downloads.mongodb.com/compass/mongosh-2.5.6-darwin-x64.zip
                  unzip mongosh-2.5.6-darwin-x64.zip
                  cp ./mongosh-2.5.6-darwin-x64/bin/mongosh ./raw/${DATABASE}/${DB_MAJOR_VERSION}/${{ matrix.platform }}/${{ matrix.arch }}/
                fi
              else
                if [[ "${{ matrix.arch }}" == "arm64" ]]; then
                  curl -LO https://fastdl.mongodb.org/linux/mongodb-linux-aarch64-ubuntu2204-${DB_VERSION}.tgz
                  tar -xzf mongodb-linux-aarch64-ubuntu2204-${DB_VERSION}.tgz
                  cp ./mongodb-linux-aarch64-ubuntu2204-${DB_VERSION}/bin/* ./raw/${DATABASE}/${DB_MAJOR_VERSION}/${{ matrix.platform }}/${{ matrix.arch }}/

                  curl -LO https://downloads.mongodb.com/compass/mongosh-2.5.6-linux-arm64.tgz
                  tar -xzf mongosh-2.5.6-linux-arm64.tgz
                  cp ./mongosh-2.5.6-linux-arm64/bin/mongosh ./raw/${DATABASE}/${DB_MAJOR_VERSION}/${{ matrix.platform }}/${{ matrix.arch }}/
                else
                  curl -LO https://fastdl.mongodb.org/linux/mongodb-linux-x86_64-ubuntu2204-${DB_VERSION}.tgz
                  tar -xzf mongodb-linux-x86_64-ubuntu2204-${DB_VERSION}.tgz
                  cp ./mongodb-linux-x86_64-ubuntu2204-${DB_VERSION}/bin/* ./raw/${DATABASE}/${DB_MAJOR_VERSION}/${{ matrix.platform }}/${{ matrix.arch }}/

                  curl -LO https://downloads.mongodb.com/compass/mongosh-2.5.6-linux-x64.tgz
                  tar -xzf mongosh-2.5.6-linux-x64.tgz
                  cp ./mongosh-2.5.6-linux-x64/bin/mongosh ./raw/${DATABASE}/${DB_MAJOR_VERSION}/${{ matrix.platform }}/${{ matrix.arch }}/
                fi
              fi
              ;;
            postgresql)
              if [[ "$RUNNER_OS" == "macOS" ]]; then
                # Install Homebrew if missing (for coreutils)
                if ! command -v brew &> /dev/null; then
                  echo "Installing Homebrew..."
                  NONINTERACTIVE=1 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
                  eval "$(/opt/homebrew/bin/brew shellenv)"
                fi
                
                # Install required tools
                brew install coreutils

                # Download and extract PostgreSQL source
                TARBALL="postgresql-${DB_VERSION}.tar.gz"
                TARBALL_URL="https://ftp.postgresql.org/pub/source/v${DB_VERSION}/${TARBALL}"
                curl -fLO "$TARBALL_URL"
                tar -xzf "$TARBALL"
                cd "postgresql-${DB_VERSION}"

                # Clean previous builds
                make clean || true

                # Set up architecture-specific build flags
                SDK_PATH=$(xcrun --show-sdk-path)
                if [[ "${{ matrix.arch }}" == "arm64" ]]; then
                  MIN_MACOS="11.0"
                else
                  MIN_MACOS="10.15"
                fi

                # Configure with portable rpath
                LDFLAGS="-arch ${{ matrix.arch }} -isysroot $SDK_PATH -mmacosx-version-min=$MIN_MACOS" \
                CFLAGS="-arch ${{ matrix.arch }} -isysroot $SDK_PATH -mmacosx-version-min=$MIN_MACOS" \
                ./configure \
                  --prefix="$GITHUB_WORKSPACE/pgsql" \
                  --enable-rpath \
                  --without-readline \
                  --without-zlib \
                  --without-openssl \
                  --without-icu

                # Build and install
                make -j$(sysctl -n hw.ncpu)
                make install

                # Create lib directory in output
                mkdir -p ../raw/${DATABASE}/${DB_MAJOR_VERSION}/${{ matrix.platform }}/${{ matrix.arch }}/lib

                # Copy binaries and libraries
                cp -R "$GITHUB_WORKSPACE/pgsql/bin"/* ../raw/${DATABASE}/${DB_MAJOR_VERSION}/${{ matrix.platform }}/${{ matrix.arch }}/
                cp -R "$GITHUB_WORKSPACE/pgsql/lib"/*.dylib ../raw/${DATABASE}/${DB_MAJOR_VERSION}/${{ matrix.platform }}/${{ matrix.arch }}/lib/ 2>/dev/null || true

                # Fix library paths for portability
                BIN_DIR="../raw/${DATABASE}/${DB_MAJOR_VERSION}/${{ matrix.platform }}/${{ matrix.arch }}"
                LIB_DIR="../raw/${DATABASE}/${DB_MAJOR_VERSION}/${{ matrix.platform }}/${{ matrix.arch }}/lib"

                # Fix rpath in binaries to use relative paths
                for binary in "$BIN_DIR"/*; do
                  if [[ -f "$binary" && -x "$binary" && ! -d "$binary" ]]; then
                    echo "Fixing paths for $(basename "$binary")"
                    
                    # Get current library dependencies
                    otool -L "$binary" | grep "$GITHUB_WORKSPACE/pgsql" | while read -r line; do
                      old_path=$(echo "$line" | awk '{print $1}')
                      lib_name=$(basename "$old_path")
                      
                      # Change absolute path to relative path
                      install_name_tool -change "$old_path" "@loader_path/lib/$lib_name" "$binary" 2>/dev/null || true
                    done
                    
                    # Set rpath for the binary
                    install_name_tool -add_rpath "@loader_path/lib" "$binary" 2>/dev/null || true
                  fi
                done

                # Fix library paths in shared libraries themselves
                for lib in "$LIB_DIR"/*.dylib; do
                  if [[ -f "$lib" ]]; then
                    echo "Fixing paths for $(basename "$lib")"
                    lib_name=$(basename "$lib")
                    
                    # Fix the library's own install name
                    install_name_tool -id "@rpath/$lib_name" "$lib" 2>/dev/null || true
                    
                    # Fix dependencies within the library
                    otool -L "$lib" | grep "$GITHUB_WORKSPACE/pgsql" | while read -r line; do
                      old_path=$(echo "$line" | awk '{print $1}')
                      dep_name=$(basename "$old_path")
                      
                      if [[ "$dep_name" != "$lib_name" ]]; then
                        install_name_tool -change "$old_path" "@loader_path/$dep_name" "$lib" 2>/dev/null || true
                      fi
                    done
                  fi
                done

                echo "Verifying portable paths..."
                for binary in "$BIN_DIR"/*; do
                  if [[ -f "$binary" && -x "$binary" && ! -d "$binary" ]]; then
                    echo "  $(basename "$binary"):"
                    otool -L "$binary" | grep -E "(loader_path|rpath)" || echo "    No relative paths found"
                  fi
                done

                cd ..
              else
                curl -LO https://ftp.postgresql.org/pub/source/v${DB_VERSION}/postgresql-${DB_VERSION}.tar.gz
                tar -xzf postgresql-${DB_VERSION}.tar.gz
                cd postgresql-${DB_VERSION}
                ./configure --prefix=$GITHUB_WORKSPACE/pgsql --without-readline --without-zlib --without-icu --disable-shared --enable-static --disable-rpath
                make -j$(nproc)
                make install
                cp $GITHUB_WORKSPACE/pgsql/bin/* ../raw/${DATABASE}/${DB_MAJOR_VERSION}/${{ matrix.platform }}/${{ matrix.arch }}/
              fi
              ;;
          esac

      - name: Archive binaries into platform-specific package
        shell: bash
        run: |
          mkdir -p ./packages/${DATABASE}/${DB_MAJOR_VERSION}/${{ matrix.platform }}
          tar -czf ./packages/${DATABASE}/${DB_MAJOR_VERSION}/${{ matrix.platform }}/${{ matrix.arch }}.tar.gz -C ./raw/${DATABASE}/${DB_MAJOR_VERSION}/${{ matrix.platform }}/${{ matrix.arch }} .

      - name: Upload to R2 with aws-cli
        shell: bash
        run: |
          set -euo pipefail
          pip install awscli --break-system-packages

          if [[ -z "$R2_ENDPOINT" ]]; then
            echo "R2_ENDPOINT is empty. Skipping upload."
            exit 1
          fi

          export AWS_ACCESS_KEY_ID="$R2_ACCESS_KEY_ID"
          export AWS_SECRET_ACCESS_KEY="$R2_SECRET_ACCESS_KEY"
          export AWS_DEFAULT_REGION="auto"

          aws s3 cp \
            ./packages/${DATABASE}/${DB_MAJOR_VERSION}/${{ matrix.platform }}/ \
            s3://$R2_BUCKET/${DATABASE}/${DB_MAJOR_VERSION}/${{ matrix.platform }}/ \
            --recursive \
            --endpoint-url "$R2_ENDPOINT"
