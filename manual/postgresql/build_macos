#!/bin/bash

set -euo pipefail

ARCH="${1:-}"
VERSION="17.5"
MAJOR_VERSION=$(echo "$VERSION" | cut -d '.' -f1)

if [[ -z "$ARCH" || ( "$ARCH" != "arm64" && "$ARCH" != "x86_64" ) ]]; then
  echo "Usage: ./build_postgresql_17.5.sh <arm64|x86_64>"
  exit 1
fi

# Get the directory where this script is located
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/../.." && pwd)"

# Look for config.json in multiple locations
if [[ -f "$PROJECT_ROOT/config.json" ]]; then
  CONFIG_FILE="$PROJECT_ROOT/config.json"
elif [[ -f "$SCRIPT_DIR/config.json" ]]; then
  CONFIG_FILE="$SCRIPT_DIR/config.json"
else
  echo "Missing config.json. Expected at either:"
  echo "  $PROJECT_ROOT/config.json"
  echo "  $SCRIPT_DIR/config.json"
  exit 1
fi

# Install Homebrew if missing
if ! command -v brew &> /dev/null; then
  echo "Installing Homebrew..."
  NONINTERACTIVE=1 /bin/bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
  eval "$(/opt/homebrew/bin/brew shellenv)"
fi

# Ensure required tools are installed
brew install jq awscli coreutils

R2_ACCESS_KEY_ID=$(jq -r .R2_ACCESS_KEY_ID "$CONFIG_FILE")
R2_SECRET_ACCESS_KEY=$(jq -r .R2_SECRET_ACCESS_KEY "$CONFIG_FILE")
R2_BUCKET=$(jq -r .R2_BUCKET "$CONFIG_FILE")
R2_ENDPOINT=$(jq -r .R2_ENDPOINT "$CONFIG_FILE")

SRC_DIR="$SCRIPT_DIR"
TMP_DIR="$SRC_DIR/tmp/$ARCH"
ARCHIVE_OUTPUT="$SRC_DIR/$VERSION/$ARCH.tar.gz"
TARBALL="postgresql-$VERSION.tar.gz"
TARBALL_URL="https://ftp.postgresql.org/pub/source/v$VERSION/$TARBALL"

mkdir -p "$SRC_DIR"
cd "$SRC_DIR"

echo "Downloading PostgreSQL $VERSION..."
curl -fLO "$TARBALL_URL"

echo "Extracting..."
tar -xzf "$TARBALL"
cd "postgresql-$VERSION"

echo "Cleaning previous builds..."
make clean || true

SDK_PATH=$(xcrun --show-sdk-path)

if [[ "$ARCH" == "arm64" ]]; then
  MIN_MACOS="11.0"
else
  MIN_MACOS="10.15"
fi

echo "Configuring with portable rpath for $ARCH..."
LDFLAGS="-arch $ARCH -isysroot $SDK_PATH -mmacosx-version-min=$MIN_MACOS" \
CFLAGS="-arch $ARCH -isysroot $SDK_PATH -mmacosx-version-min=$MIN_MACOS" \
./configure \
  --prefix="$TMP_DIR" \
  --enable-rpath \
  --without-readline \
  --without-zlib \
  --without-openssl \
  --without-icu

echo "Building..."
make -j$(sysctl -n hw.ncpu)

echo "Installing to temp directory..."
make install

echo "Fixing library paths for portability..."
# Fix rpath in binaries to use relative paths
for binary in "$TMP_DIR/bin"/*; do
  if [[ -f "$binary" && -x "$binary" ]]; then
    echo "Fixing paths for $(basename "$binary")"
    
    # Get current library dependencies
    otool -L "$binary" | grep "$TMP_DIR" | while read -r line; do
      old_path=$(echo "$line" | awk '{print $1}')
      lib_name=$(basename "$old_path")
      
      # Change absolute path to relative path
      install_name_tool -change "$old_path" "@loader_path/../lib/$lib_name" "$binary"
    done
    
    # Set rpath for the binary
    install_name_tool -add_rpath "@loader_path/../lib" "$binary" 2>/dev/null || true
  fi
done

# Fix library paths in shared libraries themselves
for lib in "$TMP_DIR/lib"/*.dylib; do
  if [[ -f "$lib" ]]; then
    echo "Fixing paths for $(basename "$lib")"
    lib_name=$(basename "$lib")
    
    # Fix the library's own install name
    install_name_tool -id "@rpath/$lib_name" "$lib"
    
    # Fix dependencies within the library
    otool -L "$lib" | grep "$TMP_DIR" | while read -r line; do
      old_path=$(echo "$line" | awk '{print $1}')
      dep_name=$(basename "$old_path")
      
      if [[ "$dep_name" != "$lib_name" ]]; then
        install_name_tool -change "$old_path" "@loader_path/$dep_name" "$lib"
      fi
    done
  fi
done

echo "Verifying portable paths..."
echo "Checking binaries:"
for binary in "$TMP_DIR/bin"/*; do
  if [[ -f "$binary" && -x "$binary" ]]; then
    echo "  $(basename "$binary"):"
    otool -L "$binary" | grep -E "(loader_path|rpath)" || echo "    No relative paths found"
  fi
done

echo "Checking libraries:"
for lib in "$TMP_DIR/lib"/*.dylib; do
  if [[ -f "$lib" ]]; then
    echo "  $(basename "$lib"):"
    otool -L "$lib" | grep -E "(loader_path|rpath)" || echo "    No relative paths found"
  fi
done

echo "Packing binaries..."
mkdir -p "$SRC_DIR/$VERSION"
cd "$SRC_DIR/tmp"
tar -czf "$ARCHIVE_OUTPUT" "$ARCH"

echo "Uploading to R2..."
export AWS_ACCESS_KEY_ID="$R2_ACCESS_KEY_ID"
export AWS_SECRET_ACCESS_KEY="$R2_SECRET_ACCESS_KEY"
export AWS_DEFAULT_REGION="auto"

aws s3 cp \
  "$ARCHIVE_OUTPUT" \
  "s3://$R2_BUCKET/postgresql/$MAJOR_VERSION/macos/$ARCH.tar.gz" \
  --endpoint-url "$R2_ENDPOINT"

echo "Cleaning up..."
cd "$SRC_DIR"
rm -rf "postgresql-$VERSION" "$TARBALL" "$SRC_DIR/tmp" "$ARCHIVE_OUTPUT"

echo "âœ… Portable build and upload for $ARCH complete (rpath verified)."
