#!/bin/bash

set -euo pipefail

ARCH="${1:-}"
VERSION="17.5"
MAJOR_VERSION=$(echo "$VERSION" | cut -d '.' -f1)

if [[ -z "$ARCH" || ( "$ARCH" != "arm64" && "$ARCH" != "x86_64" ) ]]; then
  echo "Usage: ./build-linux <arm64|x86_64>"
  exit 1
fi

# Get the directory where this script is located
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
PROJECT_ROOT="$(cd "$SCRIPT_DIR/../.." && pwd)"

# Look for config.json in multiple locations
if [[ -f "$PROJECT_ROOT/config.json" ]]; then
  CONFIG_FILE="$PROJECT_ROOT/config.json"
elif [[ -f "$SCRIPT_DIR/config.json" ]]; then
  CONFIG_FILE="$SCRIPT_DIR/config.json"
else
  echo "Missing config.json. Expected at either:"
  echo "  $PROJECT_ROOT/config.json"
  echo "  $SCRIPT_DIR/config.json"
  exit 1
fi

# Install required packages
echo "Installing required packages..."
sudo apt-get update
sudo apt-get install -y build-essential zlib1g-dev libreadline-dev libssl-dev libicu-dev pkg-config curl jq python3-pip bison flex patchelf chrpath

# Install AWS CLI via pip
echo "Installing AWS CLI..."
pip3 install awscli --break-system-packages

# Install cross-compilation tools if needed
if [[ "$ARCH" == "arm64" && "$(uname -m)" != "aarch64" ]]; then
  echo "Installing cross-compilation tools for arm64..."
  sudo apt-get install -y gcc-aarch64-linux-gnu g++-aarch64-linux-gnu
  CROSS_COMPILE="aarch64-linux-gnu-"
  HOST_FLAG="--host=aarch64-linux-gnu"
elif [[ "$ARCH" == "x86_64" && "$(uname -m)" != "x86_64" ]]; then
  echo "Installing cross-compilation tools for x86_64..."
  sudo apt-get install -y gcc-x86-64-linux-gnu g++-x86-64-linux-gnu
  CROSS_COMPILE="x86_64-linux-gnu-"
  HOST_FLAG="--host=x86_64-linux-gnu"
else
  CROSS_COMPILE=""
  HOST_FLAG=""
fi

R2_ACCESS_KEY_ID=$(jq -r .R2_ACCESS_KEY_ID "$CONFIG_FILE")
R2_SECRET_ACCESS_KEY=$(jq -r .R2_SECRET_ACCESS_KEY "$CONFIG_FILE")
R2_BUCKET=$(jq -r .R2_BUCKET "$CONFIG_FILE")
R2_ENDPOINT=$(jq -r .R2_ENDPOINT "$CONFIG_FILE")

SRC_DIR="$SCRIPT_DIR"
TMP_DIR="$SRC_DIR/tmp/$ARCH"
ARCHIVE_OUTPUT="$SRC_DIR/$VERSION/$ARCH.tar.gz"
TARBALL="postgresql-$VERSION.tar.gz"
TARBALL_URL="https://ftp.postgresql.org/pub/source/v$VERSION/$TARBALL"

mkdir -p "$SRC_DIR"
cd "$SRC_DIR"

echo "Downloading PostgreSQL $VERSION..."
curl -fLO "$TARBALL_URL"

echo "Extracting..."
tar -xzf "$TARBALL"
cd "postgresql-$VERSION"

echo "Cleaning previous builds..."
make clean || true

echo "Configuring for $ARCH with static linking..."

# Set up cross-compilation environment variables
if [[ -n "$CROSS_COMPILE" ]]; then
  export CC="${CROSS_COMPILE}gcc"
  export CXX="${CROSS_COMPILE}g++"
  export AR="${CROSS_COMPILE}ar"
  export STRIP="${CROSS_COMPILE}strip"
  export RANLIB="${CROSS_COMPILE}ranlib"
fi

# Configure with shared libraries but portable settings
# We need shared libraries for libpq, but we'll bundle them
CFLAGS="-fPIC" \
LDFLAGS="-Wl,-rpath,'\$ORIGIN/../lib'" \
./configure \
  $HOST_FLAG \
  --prefix="$TMP_DIR" \
  --enable-shared \
  --enable-static \
  --without-readline \
  --without-zlib \
  --without-openssl \
  --without-icu

echo "Building..."
make -j$(nproc)

echo "Installing to temp directory..."
make install

echo "Creating lib directory and copying shared libraries..."
mkdir -p "$TMP_DIR/lib"

# Copy PostgreSQL shared libraries
if [[ -d "$TMP_DIR/lib" ]]; then
  # Copy libpq and other PostgreSQL libraries
  find "$TMP_DIR/lib" -name "*.so*" -type f -exec cp {} "$TMP_DIR/lib/" \; 2>/dev/null || true
fi

# Also check for libraries in the build directory
find . -name "libpq.so*" -type f -exec cp {} "$TMP_DIR/lib/" \; 2>/dev/null || true
find . -name "*.so*" -type f -path "*/src/interfaces/libpq/*" -exec cp {} "$TMP_DIR/lib/" \; 2>/dev/null || true

echo "Setting RPATH for binaries..."
for binary in "$TMP_DIR/bin"/*; do
  if [[ -f "$binary" && -x "$binary" ]]; then
    echo "Setting RPATH for $(basename "$binary")"
    # Set RPATH to look for libraries in ../lib relative to binary location
    if command -v patchelf &> /dev/null; then
      patchelf --set-rpath '$ORIGIN/../lib' "$binary" 2>/dev/null || true
    elif command -v chrpath &> /dev/null; then
      chrpath -r '$ORIGIN/../lib' "$binary" 2>/dev/null || true
    fi
  fi
done

echo "Stripping binaries to reduce size..."
for binary in "$TMP_DIR/bin"/*; do
  if [[ -f "$binary" && -x "$binary" ]]; then
    echo "Stripping $(basename "$binary")"
    ${CROSS_COMPILE}strip "$binary" 2>/dev/null || strip "$binary" 2>/dev/null || true
  fi
done

# Strip shared libraries too
for lib in "$TMP_DIR/lib"/*.so*; do
  if [[ -f "$lib" ]]; then
    echo "Stripping $(basename "$lib")"
    ${CROSS_COMPILE}strip "$lib" 2>/dev/null || strip "$lib" 2>/dev/null || true
  fi
done

echo "Verifying binary architecture and dependencies..."
for binary in "$TMP_DIR/bin"/*; do
  if [[ -f "$binary" && -x "$binary" ]]; then
    echo "  $(basename "$binary"):"
    file "$binary" | grep -E "(ELF|executable)" || echo "    Not an ELF binary"
    
    # Check for dynamic dependencies
    if command -v ldd &> /dev/null; then
      echo "    Dependencies:"
      ldd "$binary" 2>/dev/null | head -10 || echo "    Could not determine dependencies"
    fi
    
    # Check RPATH
    if command -v readelf &> /dev/null; then
      echo "    RPATH:"
      readelf -d "$binary" 2>/dev/null | grep -E "(RPATH|RUNPATH)" || echo "    No RPATH set"
    fi
  fi
done

echo "Listing shared libraries in lib directory..."
ls -la "$TMP_DIR/lib/" 2>/dev/null || echo "No lib directory found"

echo "Packing binaries..."
mkdir -p "$SRC_DIR/$VERSION"
cd "$SRC_DIR/tmp"
tar -czf "$ARCHIVE_OUTPUT" "$ARCH"

echo "Uploading to R2..."
export AWS_ACCESS_KEY_ID="$R2_ACCESS_KEY_ID"
export AWS_SECRET_ACCESS_KEY="$R2_SECRET_ACCESS_KEY"
export AWS_DEFAULT_REGION="auto"

aws s3 cp \
  "$ARCHIVE_OUTPUT" \
  "s3://$R2_BUCKET/postgresql/$MAJOR_VERSION/linux/$ARCH.tar.gz" \
  --endpoint-url "$R2_ENDPOINT"

echo "Cleaning up..."
cd "$SRC_DIR"
rm -rf "postgresql-$VERSION" "$TARBALL" "$SRC_DIR/tmp" "$ARCHIVE_OUTPUT"

echo "âœ… Static build and upload for $ARCH complete."
